@(desc: String, messages: Seq[models.MessageWrapper], external: Option[String])
var http = require("http"),
	https = require("https"),
	assert = require("chai").assert,
	@external.map{v=>external = require("@v")}.getOrElse{external = null},
	querystring = require("querystring");
var IGNORE_KEYS = [],
	IGNORE_VALUE = "__IGNORE__";

function Interceptor() {
	function buildTestData(request, data) {
		if (external && external.buildTestData) {
			return external.buildTestData(request, data);
		}
		return data;
	}
	function hookRequest(prevResponse, request) {
		if (external && external.hookRequest) {
			external.hookRequest(prevResponse, request);
		}
	}
	function validate(request, response) {
		if (external && external.validate) {
			return external.validate(request, response);
		}
		return false;
	}

	this.buildTestData = buildTestData;
	this.hookRequest = hookRequest;
	this.validate = validate;
}
function buildBody(contentType, params) {
	if (!params) {
		return null;
	}
	var ret = "";
	switch(contentType) {
		case "application/x-www-form-urlencoded":
			for (var key in params) {
				var value = params[key];
				if (Array.isArray(value)) {
					for (var i=0; i<value.length; i++) {
						if (ret.length > 0) ret += "&";
						ret += querystring.escape(key) + "=" + querystring.escape(value[i]);
					}
				} else {
					if (ret.length > 0) ret += "&";
					ret += querystring.escape(key) + "=" + querystring.escape(value);
				}
			};
			break;
		case "application/json":
			ret = JSON.stringify(params);
			break;
		default:
			ret = params;
	}
	return ret;
}
function compareJson(actual, expected, prefix) {
	if (!prefix) {
		prefix = "";
	}
	for (var key in expected) {
		if (IGNORE_KEYS.indexOf(key) !== -1) {
			continue;
		}
		var v1 = expected[key],
			v2 = actual[key];
		if (typeof(v1) === "object" && typeof(v2) === "object") {
			compareJson(v2, v1, prefix + key + ".");
		} else if (v1 === IGNORE_VALUE) {
			assert.notEqual(typeof(v2), "undefined", "Key not found - " + prefix + key);
		} else {
			assert.equal(v2, v1, "Not equal - " + prefix + key + ": ");
		}
	}
}
function isJsonType(obj) {
	if (!obj || !obj.headers) return false;
	var ct = obj.headers["content-type"];
	return ct && ct.indexOf("application/json") == 0;
}
function Cookies() {
	function Cookie(name, value) {
		this.name = name;
		this.value = value;
		this.expires = null;
		this.maxAge = 0;
		this.domain = null;
		this.path = "/";
		this.secure = false;
		this.httpOnly = false;
	}
	function parseNameValuePair(str) {
		var idx = str.indexOf("=");
		if (idx == -1) {
			return null;
		}
		return new Cookie(str.substring(0, idx).trim(), str.substring(idx+1));
	}
	function parseSetCookie(str) {
		var strs = str.split(";"),
			cookie = parseNameValuePair(strs[0]);
		if (!cookie) {
			return null;
		}
		for (var i=1; i<strs.length; i++) {
			var value = strs[i].trim();
			if (value == "Secure") {
				cookie.secure = true;
			} else if (value == "HttpOnly") {
				cookie.httpOnly = true;
			} else if (value.indexOf("Expires=") == 0) {
				cookie.expires = value.split("=")[1];
			} else if (value.indexOf("Max-Age=") == 0) {
				cookie.maxAge = parseInt(value.split("=")[1], 10);
			} else if (value.indexOf("Domain=") == 0) {
				cookie.domain = value.split("=")[1];
			} else if (value.indexOf("Path=") == 0) {
				cookie.path = value.split("=")[1];
			}
		}
		return cookie;
	}
	function addSetCookie(cookies) {
		if (!cookies || cookies.length == 0) {
			return;
		}
		if (!Array.isArray(cookies)) {
			cookies = [cookies];
		}
		for (var i=0; i<cookies.length; i++) {
			var cookie = parseSetCookie(cookies[i]);
			if (cookie) {
				values[cookie.name] = cookie;
			}
		}
	}
	function addCookie(str) {
		var strs = str.split(";");
		for (var i=1; i<strs.length; i++) {
			var cookie = parseNameValuePair(strs[i].trim());
			if (cookie && !values[cookie.name]) {
				values[cookie.name] = cookie;
			}
		}
	}
	function getCookie(path, ssl) {
		var ret = "";
		for (var key in values) {
			var cookie = values[key];
			if (!ssl && cookie.secure) {
				continue;
			}
			if (path.indexOf(cookie.path) != 0) {
				continue;
			}
			ret += cookie.name + "=" + cookie.value + "; ";
		}
		return ret;
	}
	var values = {};
	this.addCookie = addCookie;
	this.addSetCookie = addSetCookie;
	this.getCookie = getCookie;
}
/**********************************************
 * Generated test
 *********************************************/
describe("@desc", function() {
	this.timeout(10000);
	var cookies = new Cookies(),
		prevResponse = null,
		interceptor = new Interceptor();
@messages.map { msg =>
	//@msg.uri
	it("@msg.uri", function(done) {
		function validateResponse(response) {
			if (interceptor.validate(request, response)) {
				return;
			}
			assert.equal(response.statusCode, @msg.statusCode);
			if (isJsonType(response) && testData) {
				compareJson(response.body, testData);
			}
		}
		var con = @msg.protocol,
			request = {
				"hostname": "@msg.host",
				"method": "@msg.method",
				"path": "@msg.uri",
				"headers": @msg.requestHeaders(4),
				"body": @msg.requestBody(4)
			},
			testData = interceptor.buildTestData(request, @msg.responseBody(3));

		//Calc cookie
		cookies.addCookie(request.headers["Cookie"]);
		var cookie = cookies.getCookie(request.path, con === https);
		if (cookie) {
			request.headers["Cookie"] = cookie;
		}
		interceptor.hookRequest(prevResponse, request);
		var requestData = buildBody("@msg.requestContentType", request.body);
		if (requestData) {
			request.headers["Content-Length"] = new Buffer(requestData, "utf-8").length;
		}
		var req = con.request(request, function(res) {
				var body = "";
				res.setEncoding("utf-8");
				res.on("data", function(data) { body += data;});
				res.on("end", function() { 
					cookies.addSetCookie(res.headers["set-cookie"]);
					if (isJsonType(res)) {
						body = JSON.parse(body);
					}
					res.body = body;
					prevResponse = res;
					validateResponse(res);
					done();
				});
			});
		if (requestData) {
			req.write(requestData);
		}
		req.end();
	});
}	
});